"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[395],{1198:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"type":"mdx","permalink":"/MyProjectName/","source":"@site/pages/index.md","title":"Relay","description":"Last updated 06/07/2025","frontMatter":{},"unlisted":false}');var l=r(4848),i=r(8453);const a={},s="Relay",c={},o=[{value:"Last updated 06/07/2025",id:"last-updated-06072025",level:3},{value:"Installation",id:"installation",level:2},{value:"Client",id:"client",level:3},{value:"Server",id:"server",level:3},{value:"Example",id:"example",level:2},{value:"Client",id:"client-1",level:3},{value:"Server",id:"server-1",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"relay",children:"Relay"})}),"\n",(0,l.jsx)(n.h3,{id:"last-updated-06072025",children:"Last updated 06/07/2025"}),"\n",(0,l.jsx)(n.p,{children:"Simplifies the usage of server-to-client communication via establishing networking requests in service/module format. (similar to Knit)"}),"\n",(0,l.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,l.jsx)(n.h3,{id:"client",children:"Client"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-luau",children:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\r\n\r\nlocal Relay = require(ReplicatedStorage.Relay)\r\n\r\nlocal TestService = {Cash = 0}\r\nTestService.__index = TestService\r\n\r\n-- Creates TestService on the client\r\nTestService.Relay = Relay.new("TestService", TestService)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"server",children:"Server"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-luau",children:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\r\n\r\nlocal Relay = require(ReplicatedStorage.Relay)\r\n\r\nlocal TestService = {Cash = 500}\r\nTestService.__index = TestService\r\n\r\nfunction TestService:init()\r\n     -- Creates "TestService" with the only whitelisted function being TestService:getCash()\r\n     self.Relay = Relay.new("TestService", self, {self.getCash})\r\nend\n'})}),"\n",(0,l.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,l.jsx)(n.p,{children:"Retrieve cash from the server and store it on the client service"}),"\n",(0,l.jsx)(n.h3,{id:"client-1",children:"Client"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-luau",children:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\r\n\r\nlocal Relay = require(ReplicatedStorage.Relay)\r\n\r\nlocal TestService = {Cash = 0}\r\nTestService.__index = TestService\r\n\r\nTestService._Relay = Relay.new("TestService", TestService)\r\n\r\nfunction TestService:_init()\r\n     self.Cash = self_Relay:fetchAsync("getCash") -- $500\r\nend\n'})}),"\n",(0,l.jsx)(n.h3,{id:"server-1",children:"Server"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-luau",children:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\r\n\r\nlocal Relay = require(ReplicatedStorage.Relay)\r\n\r\nlocal TestService = {Cash = 500}\r\nTestService.__index = TestService\r\n\r\nfunction TestService:init()\r\n     -- Creates "TestService" with the only whitelisted function being TestService:getCash()\r\n     self.Relay = Relay.new("TestService", self, {self.getCash})\r\nend\r\n\r\nfunction TestService:getCash()\r\n     return self.Cash\r\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var t=r(6540);const l={},i=t.createContext(l);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);