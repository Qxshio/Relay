"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[584],{4869:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new RelayServer instance","params":[{"name":"GUID","desc":"The unique identifier for the RelayServer instance","lua_type":"string | Instance"},{"name":"Module","desc":"The table of functions the client will be communicating with","lua_type":"RelayModule"},{"name":"Whitelist","desc":"The methods that the client is allowed to call","lua_type":"RelayWhitelist?"},{"name":"Blacklist","desc":"","lua_type":"{}?\\r\\n"}],"returns":[{"desc":"","lua_type":"RelayServer"}],"function_type":"static","source":{"line":37,"path":"src/Relay/RelayServer.lua"}},{"name":"propertyChangeAllowed","desc":"Determines if a property change is allowed based on a whitelist of string patterns.\\n\\nThis function checks whether a given `stringPath` matches any of the patterns in the provided whitelist/blacklist.\\nPatterns may include wildcards (`*`) to allow for flexible matching, e.g., `\\"Player.*.Health\\"`.","params":[{"name":"stringPath","desc":"The dot-separated string path to check","lua_type":"string"},{"name":"Whitelist","desc":"An array of string patterns to match against","lua_type":"{}"}],"returns":[{"desc":"Returns `true` if the path is allowed, `false` otherwise; returns `nil` if the whitelist is not provided","lua_type":"boolean?"}],"function_type":"method","source":{"line":135,"path":"src/Relay/RelayServer.lua"}},{"name":"getModuleTreeFromString","desc":"Traverses a nested module/table structure using a dot-separated string path.\\n\\nGiven a string like `\\"Player.Inventory.Weapons\\"` and a root module table,\\nthis function walks the path and returns the final table before the last key, along with the last key as a string.\\n\\nUseful for dynamically accessing nested module properties based on a string input.","params":[{"name":"stringPath","desc":"A dot-separated string representing the path to traverse (e.g., `\\"A.B.C\\"`)","lua_type":"string"},{"name":"module","desc":"The root module or table to start the traversal from","lua_type":"{}"}],"returns":[{"desc":"The table at the second-to-last level of the path","lua_type":"{}?"},{"desc":"The final key in the path","lua_type":"string?"}],"function_type":"method","source":{"line":169,"path":"src/Relay/RelayServer.lua"}},{"name":"setValueFromStringIndex","desc":"Sets a value in a nested table structure using a dot-separated string path.\\n\\nThis function navigates through the given `module` table according to `stringPath`,\\nand sets the specified `value` at the targeted key. It optionally checks against\\na `Whitelist` of allowed path patterns to restrict which paths can be modified.\\n\\t\\nIf `RelayServer._referentialIntegrityFlag` is defined, it performs a type check to\\nensure the new value matches the existing value\u2019s type, and triggers the flag function\\nwith the `Player` as argument if the types differ.","params":[{"name":"Player","desc":"The player attempting to set the value (used for integrity flagging)","lua_type":"Player"},{"name":"module","desc":"The root table to navigate and update","lua_type":"table"},{"name":"Whitelist","desc":"Optional list of allowed path patterns to restrict access","lua_type":"table?"},{"name":"...","desc":"Additional arguments where the first is `stringPath` (dot-separated string path), and second is `value` to set","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":207,"path":"src/Relay/RelayServer.lua"}},{"name":"enforceReferentialIntegrity","desc":"Sets a callback function to enforce referential integrity during value assignment.\\n\\nWhen a value is set via `setValueFromStringIndex`, this callback is invoked if the\\nnew value\'s type does not match the existing value\'s type at the target path.","params":[{"name":"Callback","desc":"A function called with the Player when a type mismatch occurs","lua_type":"(Player) -> ()"}],"returns":[],"function_type":"method","source":{"line":265,"path":"src/Relay/RelayServer.lua"}},{"name":"fire","desc":"Communicates to the provided client(s) using the given method and parameters (...)","params":[{"name":"players","desc":"The players to include in the setting","lua_type":"PlayerGroup"},{"name":"method","desc":"The method to call","lua_type":"string"},{"name":"...","desc":"The parameters to call the method with","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":280,"path":"src/Relay/RelayServer.lua"}},{"name":"fireAll","desc":"Communicates to all clients using the given method and parameters (...)","params":[{"name":"method","desc":"The method to call","lua_type":"string"},{"name":"...","desc":"The parameters to call the method with","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":298,"path":"src/Relay/RelayServer.lua"}},{"name":"fireAllExcept","desc":"Communicates to all clients except the players provided using the given method and parameters (...)","params":[{"name":"players","desc":"The players to exclude in the setting","lua_type":"PlayerGroup"},{"name":"method","desc":"The method to call","lua_type":"string"},{"name":"...","desc":"The parameters to call the method with","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":310,"path":"src/Relay/RelayServer.lua"}},{"name":"set","desc":"Sets a value for all provided players","params":[{"name":"players","desc":"The players to include in the setting","lua_type":"PlayerGroup"},{"name":"index","desc":"The name of the value that will be set","lua_type":"string"},{"name":"value","desc":"The value to set index to","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":326,"path":"src/Relay/RelayServer.lua"}},{"name":"setAll","desc":"Sets a value for all players","params":[{"name":"index","desc":"The name of the value that will be set","lua_type":"string"},{"name":"value","desc":"The value to set index to","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":337,"path":"src/Relay/RelayServer.lua"}},{"name":"setAllExcept","desc":"Sets a value for all players except the provided players","params":[{"name":"players","desc":"The players to exclude from the setting","lua_type":"PlayerGroup"},{"name":"index","desc":"The name of the value that will be set","lua_type":"string"},{"name":"value","desc":"The value to set index to","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":349,"path":"src/Relay/RelayServer.lua"}},{"name":"destroy","desc":"Destroys the RelayServer  ","params":[],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":358,"path":"src/Relay/RelayServer.lua"}}],"properties":[],"types":[],"name":"RelayServer","desc":"RelayServer simplifies the usage of server-sided communication via establishing networking requests in service/module format.\\nInspired by leifstout","source":{"line":24,"path":"src/Relay/RelayServer.lua"}}')}}]);